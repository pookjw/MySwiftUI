// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.2 effective-5.10 (swiftlang-6.2.0.16.14 clang-1700.3.16.4)
// swift-module-flags: -target arm64-apple-xros26.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -library-level api -enable-experimental-feature Macros -enable-experimental-feature ExtensionMacros -enable-experimental-feature IsolatedAny2 -enable-upcoming-feature InferSendableFromCaptures -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -user-module-version 7.0.83.1.501 -module-name AttributeGraph -package-name AttributeGraph
// swift-module-flags-ignorable:  -formal-cxx-interoperability-mode=off -interface-compiler-version 6.2
@_exported import AttributeGraph
@_exported import Swift

@frozen
@propertyWrapper
public struct WeakAttribute<T> {
    public var base: AttributeGraph.AnyWeakAttribute
    public var wrappedValue: T? {
        get
    }

    public var projectedValue: AttributeGraph.Attribute<T>? {
        get
        set
    }
    
    @_alwaysEmitIntoClient public init(base: AttributeGraph.AnyWeakAttribute) {
        self.base = base
    }

    public init()
    public init(_: AttributeGraph.Attribute<T>)
    public init(_: AttributeGraph.Attribute<T>?)
}

@frozen
@propertyWrapper
@dynamicMemberLookup
public struct Attribute<T> {
    public var wrappedValue: T {
        get
        nonmutating set 
    }

    public var projectedValue: AttributeGraph.Attribute<T> {
        get
        set
    }

    public var value: T {
        get
        nonmutating set
    }

    @_hasStorage
    public var identifier: AttributeGraph.AnyAttribute {
        get
        set
    }

    public init<C: AttributeGraph.Rule>(_ rule: C) where C.Value == T
    public init<C: AttributeGraph.Rule>(_ rule: C, initialValue: T) where C.Value == T
    public init<C: AttributeGraph.StatefulRule>(_ rule: C) where C.Value == T
    public init<C: AttributeGraph.StatefulRule>(_ rule: C, initialValue: T) where C.Value == T

    public init(value: T)
    public init(type: T.Type)

    public init<C: AttributeGraph._AttributeBody>(body: Swift.UnsafePointer<C>, value: Swift.UnsafePointer<T>?, flags: AttributeGraph.AGAttributeTypeFlags, update: () -> (Swift.UnsafeMutableRawPointer, AttributeGraph.AnyAttribute) -> ())
    public init(identifier: AttributeGraph.AnyAttribute)

    public subscript<U>(keyPath keyPath: Swift.KeyPath<T, U>) -> AttributeGraph.Attribute<U> {
        get
    }

    public subscript<U>(dynamicMember keyPath: Swift.KeyPath<T, U>) -> AttributeGraph.Attribute<U> {
        get
    }

    public subscript<U>(offset body: (inout T) -> AttributeGraph.PointerOffset<T, U>) -> AttributeGraph.Attribute<U> {
        get
    }

    @discardableResult public func setValue(_: T) -> Swift.Bool

    public func mutateBody<T>(as: T.Type, invalidating: Swift.Bool, _: (inout T) -> ())
}

public struct IndirectAttribute<T> {

}

public struct AnyRuleContext: Swift.Equatable {
    public var attribute: AttributeGraph.AnyAttribute {
        get set
    }

    public init(attribute: AttributeGraph.AnyAttribute)
    public init<T>(_: AttributeGraph.RuleContext<T>)

    public func unsafeCast<T>(to: T.Type) -> AttributeGraph.RuleContext<T>

   public subscript<T>(_: AttributeGraph.Attribute<T>) -> T {
        get
    }

    public subscript<T>(_: AttributeGraph.WeakAttribute<T>) -> T {
        get
    }

    public subscript<T>(_: AttributeGraph.OptionalAttribute<T>) -> T {
        get
    }

    public func valueAndFlags<T>(of: AttributeGraph.Attribute<T>, options: AttributeGraph.AGValueOptions) -> (value: T, flags: AGChangedValueFlags)
    public func changedValue<T>(of: AttributeGraph.Attribute<T>, options: AttributeGraph.AGValueOptions) -> (value: T, changed: Swift.Bool)
    public func update(body: () -> Void)
}

public struct RuleContext<T>: Swift.Equatable {
    public init(attribute: AttributeGraph.Attribute<T>)

    public var attribute: AttributeGraph.Attribute<T> {
        get set
    }

    public var hasValue: Swift.Bool {
        get
    }

    public var value: T {
        get set
    }

    public subscript<U>(_: AttributeGraph.Attribute<U>) -> U {
        get
    }

    public subscript<U>(_: AttributeGraph.WeakAttribute<U>) -> U {
        get
    }

    public subscript<U>(_: AttributeGraph.OptionalAttribute<U>) -> U {
        get
    }

    public func valueAndFlags<U>(of: AttributeGraph.Attribute<U>, options: AttributeGraph.AGValueOptions) -> (value: U, flags: AGChangedValueFlags)
    public func changedValue<U>(of: AttributeGraph.Attribute<U>, options: AttributeGraph.AGValueOptions) -> (value: U, changed: Swift.Bool)
    public func update(body: () -> Void)
}

public struct _External: Swift.CustomStringConvertible {
    public var description: Swift.String {
        get
    }
}

public struct External<T> {

}

public struct Focus<Key, Value> {

}

public struct PointerOffset<A, B> {

}

@frozen
@propertyWrapper
public struct OptionalAttribute<T> {
    public var wrappedValue: T? {
        get
    }

    public var projectedValue: AttributeGraph.Attribute<T>? {
        get
        set
    }

    public var attribute: AttributeGraph.Attribute<T>? {
        get
        set
    }

    public var base: AttributeGraph.AnyOptionalAttribute {
        get
        set
    }

    public init()
    public init(_: AttributeGraph.Attribute<T>)
    public init(_: AttributeGraph.WeakAttribute<T>)
    public init(_: AttributeGraph.Attribute<T>?)
    public init(base: AttributeGraph.AnyOptionalAttribute)
}

public protocol _AttributeBody {}

public protocol Rule : AttributeGraph._AttributeBody {
    associatedtype Value

    var value: Self.Value {
        get
    }

    static var initialValue: Self.Value? {
        get
    }
}

extension AttributeGraph.Rule {
    public static var initialValue: Self.Value? {
        get
    }

    public static func _update(_: UnsafeMutableRawPointer, attribute: AttributeGraph.AnyAttribute)

    public var context: AttributeGraph.RuleContext<Self.Value> {
        get
    }

    public static func _updateDefault(_: Swift.UnsafeMutableRawPointer)
}

extension AttributeGraph.Rule where Value : Swift.Hashable {
    public func cachedValue(options: AttributeGraph.AGCachedValueOptions, owner: AttributeGraph.AnyAttribute?) -> Self.Value
    public static func _cachedValue(options: AttributeGraph.AGCachedValueOptions, owner: AttributeGraph.AnyAttribute?, hashValue: Swift.Int, bodyPtr: Swift.UnsafeMutableRawPointer, update: () -> (Swift.UnsafeMutableRawPointer, AttributeGraph.AnyAttribute) -> ()) -> Swift.UnsafePointer<Self.Value>
    public func cachedValueIfExists(options: AttributeGraph.AGCachedValueOptions, owner: AttributeGraph.AnyAttribute?) -> Self.Value?
}

extension AttributeGraph.Rule {
    public var attribute: AttributeGraph.Attribute<Self.Value> {
        get
    }
}

public protocol StatefulRule : AttributeGraph._AttributeBody {
    associatedtype Value
}

public protocol ObservedAttribute : AttributeGraph._AttributeBody {
}

public protocol AttributeBodyVisitor {
}

extension AttributeGraph.AnyAttribute: Swift.Hashable {}

extension AttributeGraph.AnyAttribute {
    public func mutateBody<T>(as: T.Type, invalidating: Swift.Bool, _: (inout T) -> ())
}

extension AttributeGraph.Graph {
    public func onUpdate(_ callback: @escaping () -> Swift.Void)
    public func onInvalidation(_ callback: @escaping (AttributeGraph.AnyAttribute) -> Swift.Void)
}

extension AttributeGraph.Graph {
    public func addTraceEvent<T>(_: Swift.UnsafePointer<Swift.Int8>, context: Swift.UnsafePointer<T>)
    public func addTraceEvent<T>(_: Swift.UnsafePointer<Swift.Int8>, value: T)
    public static func withoutUpdate<T>(_: () -> T) -> T
}

public func compareValues<T>(_: T, _: T, mode: AttributeGraph.AGComparisonMode) -> Swift.Bool
public func compareValues<T>(_: T, _: T, options: AttributeGraph.AGComparisonOptions) -> Swift.Bool

extension AttributeGraph.Subgraph {
    public func apply<T>(_: () -> T) -> T
}

extension AttributeGraph.TypeID: Swift.Hashable, Swift.CustomStringConvertible {
    public init(_: Any.Type)
    public var type: Any.Type { get }
    public var description: Swift.String { get }
}

@frozen
public struct Map<T, U>: Swift.CustomStringConvertible, AttributeGraph.Rule {
    public static var flags: AttributeGraph.AGAttributeTypeFlags {
        get
    }

    @_hasStorage
    public var arg: AttributeGraph.Attribute<T> {
        get set
    }

    @_hasStorage
    public var body: (T) -> U {
        get
    }

    public var value: U {
        get
    }

    public init(_: AttributeGraph.Attribute<T>, _: @escaping (T) -> U)

    public var description: Swift.String {
        get
    }
}

public struct AnyOptionalAttribute: Swift.Hashable, Swift.CustomStringConvertible {
    public init(_: AttributeGraph.AnyAttribute)
    public init(_: AttributeGraph.AnyAttribute?)

    public var identifier: AttributeGraph.AnyAttribute {
        get set
    }

    public var attribute: AttributeGraph.AnyAttribute? {
        get set
    }

    public var description: Swift.String {
        get
    }
}
