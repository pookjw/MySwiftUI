// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 (swift-6.0.3-RELEASE)
// swift-module-flags: -target x86_64-apple-ios16.0-simulator -enable-objc-interop -enable-library-evolution -module-link-name swiftObservation -swift-version 5 -O -library-level api -enforce-exclusivity=unchecked -target-min-inlining-version min -enable-experimental-feature NoncopyableGenerics2 -enable-experimental-feature SuppressedAssociatedTypes -enable-experimental-feature ExtensionImportVisiblity -enable-experimental-feature Macros -enable-experimental-feature ExtensionMacros -module-name _MyObservation
// swift-module-flags-ignorable: -enable-ossa-modules -enable-lexical-lifetimes=false
import Swift
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
public protocol Observable {
}
#if compiler(>=5.3) && $Macros && $AttachedMacros && $ExtensionMacros
#if compiler(>=5.3) && $ExtensionMacroAttr
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
@attached(member, names: named(_$observationRegistrar), named(access), named(withMutation)) @attached(memberAttribute) @attached(extension, conformances: Observation.Observable) public macro Observable() = #externalMacro(module: "ObservationMacros", type: "ObservableMacro")
#else
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
@attached(member, names: named(_$observationRegistrar), named(access), named(withMutation)) @attached(memberAttribute)  public macro Observable() = #externalMacro(module: "ObservationMacros", type: "ObservableMacro")
#endif
#endif
#if compiler(>=5.3) && $Macros && $AttachedMacros
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
@attached(accessor, names: named(init), named(get), named(set), named(_modify)) @attached(peer, names: prefixed(`_`)) public macro ObservationTracked() = #externalMacro(module: "ObservationMacros", type: "ObservationTrackedMacro")
#endif
#if compiler(>=5.3) && $Macros && $AttachedMacros
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
@attached(accessor, names: named(willSet)) public macro ObservationIgnored() = #externalMacro(module: "ObservationMacros", type: "ObservationIgnoredMacro")
#endif
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
public struct ObservationRegistrar : Swift.Sendable {
  public init()
  public func access<Subject, Member>(_ subject: Subject, keyPath: Swift.KeyPath<Subject, Member>) where Subject : Observation.Observable
  public func willSet<Subject, Member>(_ subject: Subject, keyPath: Swift.KeyPath<Subject, Member>) where Subject : Observation.Observable
  public func didSet<Subject, Member>(_ subject: Subject, keyPath: Swift.KeyPath<Subject, Member>) where Subject : Observation.Observable
  public func withMutation<Subject, Member, T>(of subject: Subject, keyPath: Swift.KeyPath<Subject, Member>, _ mutation: () throws -> T) rethrows -> T where Subject : Observation.Observable
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension Observation.ObservationRegistrar : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder)
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension Observation.ObservationRegistrar : Swift.Hashable {
  public static func == (lhs: Observation.ObservationRegistrar, rhs: Observation.ObservationRegistrar) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_spi(SwiftUI) @available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
public struct ObservationTracking : Swift.Sendable {
  @_spi(SwiftUI) public struct _AccessList : Swift.Sendable {
  }
  @_spi(SwiftUI) public static func _installTracking(_ tracking: Observation.ObservationTracking, willSet: (@Sendable (Observation.ObservationTracking) -> Swift.Void)? = nil, didSet: (@Sendable (Observation.ObservationTracking) -> Swift.Void)? = nil)
  @_spi(SwiftUI) public static func _installTracking(_ list: Observation.ObservationTracking._AccessList, onChange: @escaping @Sendable () -> Swift.Void)
  @_spi(SwiftUI) public init(_ list: Observation.ObservationTracking._AccessList?)
  @_spi(SwiftUI) public func cancel()
  @_spi(SwiftUI) @available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
  public var changed: Swift.AnyKeyPath? {
    @_spi(SwiftUI) get
  }
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
public func withObservationTracking<T>(_ apply: () -> T, onChange: @autoclosure () -> @Sendable () -> Swift.Void) -> T
@_spi(SwiftUI) @available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
public func withObservationTracking<T>(_ apply: () -> T, willSet: @escaping @Sendable (Observation.ObservationTracking) -> Swift.Void, didSet: @escaping @Sendable (Observation.ObservationTracking) -> Swift.Void) -> T
@_spi(SwiftUI) @available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
public func withObservationTracking<T>(_ apply: () -> T, willSet: @escaping @Sendable (Observation.ObservationTracking) -> Swift.Void) -> T
@_spi(SwiftUI) @available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
public func withObservationTracking<T>(_ apply: () -> T, didSet: @escaping @Sendable (Observation.ObservationTracking) -> Swift.Void) -> T
